name: Release

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Trigger on version tags (e.g., v1.0.0)
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: ["16"]
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        run: |
          npm install --global pnpm || { echo "pnpm installation failed"; exit 1; }

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Bump version and create tag
        id: bump_version
        run: |
          BACKEND_VERSION=$(grep '^version =' backend/movies_backend/pyproject.toml | cut -d' ' -f3 | tr -d '"')
          echo "Current Backend Version: $BACKEND_VERSION"

          if [ -z "$BACKEND_VERSION" ]; then
            echo "Error: BACKEND_VERSION is empty. Please check your pyproject.toml."
            exit 1
          fi

          IFS='.' read -r major minor patch <<< "$BACKEND_VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))"

          sed -i "s/version = \"$BACKEND_VERSION\"/version = \"$NEW_VERSION\"/" backend/movies_backend/pyproject.toml && echo "Updated pyproject.toml"
          sed -i "s/\"version\": \"$BACKEND_VERSION\"/\"version\": \"$NEW_VERSION\"/" frontend/movies_frontend/package.json && echo "Updated package.json"
          sed -i "s/__version__ = \"[0-9]*\.[0-9]*\.[0-9]*\"/__version__ = \"$NEW_VERSION\"/" backend/movies_backend/movies_backend/__init__.py && echo "Updated __init__.py"

          echo "New version is $NEW_VERSION"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit Version Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add backend/movies_backend/pyproject.toml frontend/movies_frontend/package.json backend/movies_backend/movies_backend/__init__.py
          git commit -m "Bump version to ${{ env.VERSION }}" || echo "No changes to commit"

      - name: Push Changes
        run: |
          git push origin main  # Push changes back to the main branch

      - name: Create Git tag
        run: |
          TAG_NAME="v${{ env.VERSION }}"

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists locally."

            if git ls-remote --tags origin | grep -q "$TAG_NAME"; then
              echo "Tag $TAG_NAME already exists in remote. Skipping creation."
            else
              echo "Tag $TAG_NAME exists locally but not in remote. Pushing it."
              git push origin "$TAG_NAME"
            fi
          else
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          fi

      - name: Create Release Notes
        id: create_release_notes
        uses: johnyherangi/create-release-notes@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseNotes = process.env.RELEASE_NOTES;
            const response = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION}`,
              name: `Release v${process.env.VERSION}`,
              body: releaseNotes,
              draft: false,
              prerelease: false,
            });
            console.log(response.data);
        env:
          RELEASE_NOTES: ${{ steps.create_release_notes.outputs.release-notes }}
